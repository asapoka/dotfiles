name: Test Windows Installation

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - 'scripts/**'
      - 'config/**'
      - 'home/**'
      - 'lib/**'
  pull_request:
    branches: [ master ]
    paths:
      - 'scripts/**'
      - 'config/**'
      - 'home/**'
      - 'lib/**'

jobs:
  test-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          # Check if winget is available and install dependencies
          if (Get-Command winget -ErrorAction SilentlyContinue) {
            Write-Host "winget is available"
            try {
              winget install --id Git.Git --source winget --accept-package-agreements --accept-source-agreements
            } catch {
              Write-Host "winget installation failed, continuing without additional dependencies"
            }
          } else {
            Write-Host "winget is not available, using existing tools"
          }
          
          # Verify git is available
          if (Get-Command git -ErrorAction SilentlyContinue) {
            Write-Host "git is available"
            git --version
          } else {
            Write-Host "git is not available"
          }
        shell: pwsh
      
      - name: Test installation script syntax
        run: |
          # Test PowerShell script syntax using AST parsing
          $scriptPath = "scripts/install.ps1"
          $scriptContent = Get-Content $scriptPath -Raw
          $tokens = $null
          $errors = $null
          $ast = [System.Management.Automation.Language.Parser]::ParseInput($scriptContent, [ref]$tokens, [ref]$errors)
          if ($errors.Count -gt 0) {
            Write-Host "PowerShell script has syntax errors:"
            $errors | ForEach-Object { Write-Host $_ }
            exit 1
          } else {
            Write-Host "PowerShell script syntax is valid"
          }
        shell: pwsh
      
      - name: Run installation script
        run: |
          # Set environment variables for CI
          $env:CI = "true"
          $env:DOT_DIR = (Get-Location).Path
          powershell -ExecutionPolicy Bypass -File scripts/install.ps1
        shell: pwsh
      
      - name: Verify installation
        run: |
          # Check if PowerShell profile was created
          $profilePath = $PROFILE.CurrentUserCurrentHost
          if (Test-Path $profilePath) {
            Write-Host "PowerShell profile found at: $profilePath"
            # Test PowerShell profile syntax
            try {
              . $profilePath
              Write-Host "PowerShell profile loaded successfully"
            } catch {
              Write-Host "PowerShell profile has errors: $($_.Exception.Message)"
            }
          } else {
            Write-Host "PowerShell profile not found"
            exit 1
          }
          
          # Check if dotfiles directory exists (use current directory in CI)
          $dotfilesPath = if ($env:DOT_DIR) { 
            $env:DOT_DIR 
          } elseif ($env:USERPROFILE) { 
            "$env:USERPROFILE\dotfiles" 
          } else { 
            "$HOME\dotfiles" 
          }
          if (Test-Path $dotfilesPath) {
            Write-Host "Dotfiles directory found at: $dotfilesPath"
          } else {
            Write-Host "Dotfiles directory not found at: $dotfilesPath"
            exit 1
          }
          
          # Check if tools are available (non-critical in CI environment)
          $tools = @("starship", "fzf", "lsd", "rg")
          foreach ($tool in $tools) {
            if (Get-Command $tool -ErrorAction SilentlyContinue) {
              Write-Host "$tool is available"
            } else {
              Write-Host "$tool not found (expected in CI environment)"
            }
          }
        shell: pwsh